Q-Link : https://leetcode.com/problems/number-of-islands/description/?envType=daily-question&envId=2024-04-19

Approach 1 : DFS

class Solution {
public:
int ans=0;
int n,m;

    void dfs(vector<vector<char>>& grid,int i,int j){
        if(i<0 || j<0 || i>=n || j>=m || grid[i][j]=='0' )return ;
       if(grid[i][j]=='1') grid[i][j]='0';
        dfs(grid,i+1,j);
        dfs(grid,i,j+1);
        dfs(grid,i-1,j);
        dfs(grid,i,j-1);

    }

    int numIslands(vector<vector<char>>& grid) {
        n=grid.size();
        m=grid[0].size();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1'){
                    ans++;
                    dfs(grid,i,j);
                }
            }
        }

        return ans;
    }
};


Approaxh 2 : BFS

class Solution {
public:
int ans=0;
int n,m;

    vector<vector<int>>dir {{1,0},{-1,0},{0,-1},{0,1}};

    void bfs(vector<vector<char>>& grid,int i,int j){
        
        queue<pair<int,int>>q;
        q.push({i,j});
        grid[i][j]='0';

        while(!q.empty()){
            int r=q.front().first;
            int c=q.front().second;

            q.pop();


            for(auto& d:dir){
                int newr=d[0]+r;
                int newc=d[1]+c;
                if(newr >=0 && newc>=0 &&newr<n && newc<m &&grid[newr][newc]=='1'){
                    grid[newr][newc]='0';
                    q.push({newr,newc});
                }
            }
        }

    }

    int numIslands(vector<vector<char>>& grid) {
        n=grid.size();
        m=grid[0].size();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1'){
                    ans++;
                    bfs(grid,i,j);
                }
            }
        }

        return ans;
    }
};
